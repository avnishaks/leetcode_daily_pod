
Problem Link : https://leetcode.com/problems/maximum-twin-sum-of-a-linked-list/



Approach of the Question :- 

By reversing the second half of the linked list and then taking the sum .

It is an Intermediate level question in which first we need to find the middle Node and 
reverse the second half of the Linked List.Then we will compare the each twinSum by adding 
Nodes of firstHalf and secondHalf and storing the maximum value.

Code Implementation:- 

class Solution {
public:
    int pairSum(ListNode* head) {
       
        ListNode*slow=head;
        ListNode*fast=head;
        
        while(fast!=NULL&& fast->next->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }

        ListNode*head1=slow->next;
        ListNode*prev=NULL;
        while(head1->next!=NULL){
        ListNode*temp=head1->next;
            head1->next=prev;
            prev=head1;
            head1=temp;
        }
        head1->next=prev;
        slow->next=head1;
        int res=0;
        slow=slow->next;
        
        while(slow!=NULL){
            int a=(head->val+slow->val);
            res=max(a,res);
            slow=slow->next;
            head=head->next;
        }
     return res;

        
    }
};

Learning OutCome From the Questions:- 




